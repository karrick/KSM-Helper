#!/usr/bin/env perl

use utf8;
use strict;
use warnings;

use Test::More;
use Test::Class;
use base qw(Test::Class);
END { Test::Class->runtests }

########################################

use KSM::Helper;

########################################

sub activate_reaper : Tests(startup) {
    KSM::Helper::activate_reaper();
}

########################################
# HELPERS

sub is_pid_still_alive {
    my ($pid) = @_;
    kill(0, $pid);
}

########################################
# with_timeout_spawn_child

sub test_with_timeout_spawn_child_should_croak_if_missing_function : Tests {
    eval {KSM::Helper::with_timeout_spawn_child({name => 'TEST MISSING FUNCTION'})};
    like($@, qr/missing function/);
}

sub test_with_timeout_spawn_child_should_set_status_if_child_dies : Tests {
    my $child = KSM::Helper::with_timeout_spawn_child({name => 'TEST SET STATUS FOR DIE',
						       function => sub {die "foo";}});
    isnt($child->{status}, 0);
}

sub test_with_timeout_spawn_child_should_set_status_if_exit_nonzero : Tests {
    my $child = KSM::Helper::with_timeout_spawn_child({name => 'TEST SET STATUS NONZERO',
						       function => sub {
							   exec "/bin/false";
						       }});
    isnt($child->{status}, 0);
}

sub test_with_timeout_spawn_child_should_give_child_unknown_name_if_not_defined : Tests {
    my $child = KSM::Helper::with_timeout_spawn_child({function => sub {1;}});
    like($child->{name}, qr/^unnamed child of \d+/); # FIXME: change to program name
}

sub test_with_timeout_spawn_child_should_set_child_started : Tests {
    my $child = KSM::Helper::with_timeout_spawn_child({name => 'TEST SET STARTED', function => sub {1;}});
    ok(defined($child->{started}));
    ok(POSIX::strftime("%s", gmtime) >= $child->{started});
}

sub test_with_timeout_spawn_child_should_set_child_pid : Tests {
    my $child = KSM::Helper::with_timeout_spawn_child({name => 'TEST SET PID', function => sub {1;}});
    ok(defined($child->{pid}));
}

sub test_with_timeout_spawn_child_should_not_wait_for_timeout_to_return : Tests {
    my $timeout = 5;
    my $child = {name => 'TEST IMMEDIATE',
		 timeout => $timeout,
		 function => sub {1;}};
    my $started = POSIX::strftime("%s", gmtime);
    KSM::Helper::with_timeout_spawn_child($child);
    my $ended = POSIX::strftime("%s", gmtime);
    ok((($ended - $started) <= $timeout), "should not wait for timeout");
}

sub test_with_timeout_spawn_child_should_not_take_longer_than_timeout : Tests {
    my $timeout = 1;
    my $child = {name => 'TEST SLEEP 3',
		 timeout => $timeout,
		 function => sub {
		     debug("about to sleep: %d", $$);
		     sleep 3;
		 }};
    my $started = POSIX::strftime("%s", gmtime);
    KSM::Helper::with_timeout_spawn_child($child);
    my $ended = POSIX::strftime("%s", gmtime);
    ok((($ended - $started) <= ($timeout + 1)), "should not take longer than timeout");
}

sub test_with_timeout_spawn_child_should_not_timeout_if_none_specified : Tests {
    my $child = {name => 'TEST SHOULD NOT TIMEOUT',
		 function => sub { sleep 2;}};
    my $started = POSIX::strftime("%s", gmtime);
    diag('sleeping 2 seconds TEST SHOULD NOT TIMEOUT');
    KSM::Helper::with_timeout_spawn_child($child);
    my $ended = POSIX::strftime("%s", gmtime);
    ok((($ended - $started) >= 2), "should not timeout unless specified");
}
